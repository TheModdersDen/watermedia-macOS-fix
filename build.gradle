plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4+'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        google()
        mavenCentral()
        maven { url "https://repo.spongepowered.org/maven" }
        maven { url 'https://jitpack.io' }
    }
    afterEvaluate {
        java {
            withSourcesJar()
            sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
        }

        base.archivesName = "${id}"

        configurations {
            compileAndTest
        }

        sourceSets {
            main.compileClasspath += configurations.compileAndTest
            test.compileClasspath += configurations.compileAndTest
            test.runtimeClasspath += configurations.compileAndTest
        }

        sourcesJar {
            exclude("**.zip")
            exclude("**.7z")
            exclude("**.gz")
        }

        dependencies {
            // NEEDED DEPENDENCIES (SOME ARE INCLUDED IN MC)
            compileAndTest 'org.lwjgl:lwjgl-opengl:3.2.2'
            compileAndTest 'net.java.dev.jna:jna:4.4.0'
            compileAndTest 'net.java.dev.jna:platform:3.4.0'
            compileAndTest 'com.google.code.gson:gson:2.10.1'
            compileAndTest 'org.apache.logging.log4j:log4j-api:2.20.0'
            compileAndTest 'org.apache.logging.log4j:log4j-core:2.20.0'
            compileAndTest 'org.apache.commons:commons-lang3:3.12.0'
            compileAndTest 'commons-io:commons-io:2.7' // NOTE: ask Forge to bump this on 1.16.5
        }

        // Process target resources with mod info
        processResources {
            filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json', "mcmod.info", "watermedia/version.cfg"]) {
                expand(project.properties)
            }
            outputs.upToDateWhen { false }
        }

        tasks.withType(JavaCompile).configureEach {
            it.options.encoding = 'UTF-8'
        }
    }
}

configurations {
    implementation.extendsFrom shadow
    testImplementation.extendsFrom shadow
}

repositories {}

dependencies {
    // MOCKERS
    compileOnly project(":lib-forge")
    compileOnly project(":lib-neoforge")
    compileOnly "net.fabricmc:fabric-loader:${fbversion}"

    // SUB-LIBRARIES
    shadow project(":lib-vlcj")
    shadow project(":lib-tools")
    shadow project(":lib-ytdownloader")

    // LIBRARIES TO BE SHADOW
    shadow 'org.apache.commons:commons-compress:1.26.0'
    shadow 'org.tukaani:xz:1.9'
    shadow 'com.github.luben:zstd-jni:1.5.5-11'
}

// ShadowJar task (run this task to make a built JAR.
shadowJar {

    // Add relocation rules for each dependency
    relocate 'com.github', 'me.lib720'
    relocate 'uk.co', 'me.lib720'
    relocate 'org.apache.commons', 'me.lib720.apache'
    relocate 'org.tukaani', 'me.lib720.tukaani'

    exclude "META-INF/versions/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/LICENSE.*"
    exclude "META-INF/LICENSE"
    exclude "META-INF/NOTICE.**"
    exclude "META-INF/NOTICE"
    exclude "META-INF/retrofit.**"

    mergeServiceFiles()
    archiveBaseName = id
    archiveClassifier = ''
}

jar {
    duplicatesStrategy = DuplicatesStrategy.WARN

    manifest {
        attributes([
                "Specification-Title"       : name,
                "Specification-Vendor"      : modauthor,
                "Specification-Version"     : version,
                "Implementation-Title"      : name,
                "Implementation-Version"    : version,
                "Implementation-Vendor"     : modauthor,
                "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "ForceLoadAsMod"            : "true"
        ])
    }

    finalizedBy shadowJar
}

//tasks.modrinth.enabled = System.getenv("MODRINTH_TOKEN") != null
//tasks.modrinth.group = 'publishing'
//modrinth {
//    token = System.getenv("MODRINTH_TOKEN")
//    projectId = modrinthid
//    versionNumber = modversion
//    versionType = modversiontype
//    uploadFile = shadowJar
//    gameVersions = [ "1.20.2", "1.20.1", "1.19.2", "1.18.2", "1.16.5", "1.12.2" ]
//    changelog = getCurrentChanges()
//    loaders = [ "forge", "neoforge", "fabric", "quilt" ]
//}
//
//tasks.curseforge.enabled = System.getenv("CURSEFORGE_TOKEN") != null
//tasks.curseforge.group = 'publishing'
//
//curseforge {
//    apiKey = System.getenv("CURSEFORGE_TOKEN")
//    project {
//        id = curseforgeid
//        changelog = getCurrentChanges() + "\n\n" + getChangesHistory()
//        changelogType = "markdown"
//        addGameVersion "1.20.2"
//        addGameVersion "1.20.1"
//        addGameVersion "1.19.2"
//        addGameVersion "1.18.2"
//        addGameVersion "1.16.5"
//        addGameVersion "1.12.2"
//        addGameVersion "Forge"
//        addGameVersion "NeoForge"
//        addGameVersion "Fabric"
//        addGameVersion "Quilt"
//        addGameVersion "Java 18"
//        addGameVersion "Java 17"
//        addGameVersion "Java 11"
//        addGameVersion "Java 8"
//        releaseType = modversiontype
//        mainArtifact(shadowJar) {
//        }
//    }
//}

String getCurrentChanges() {
    return file('changelog.md').readLines()
}

String getChangesHistory() {
    return file('changelog-history.md').readLines()
}

//task publishToModPages(type: GradleBuild) {
//    description 'Publish buld version to CurseForge and Modrinth'
//    group = 'publishing'
//    tasks = ['modrinth', 'curseforge']
//}